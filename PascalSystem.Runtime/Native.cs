namespace PascalSystem.Runtime
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    internal static class Native
    {
        private static void IdSearch()
        {
            var bufPtr = Stack.Pop();
            var arg2Ptr = Stack.Pop();

            Search.CspIdSearch(bufPtr, arg2Ptr);
        }

        private static readonly byte[] idSearchSig =
        {
            0x68, 0x85, 0x7e, 0x68, 0x85, 0x7f, 0x68, 0xa8, 0x68, 0xaa,
            0x68, 0x85, 0x94, 0x68, 0x85, 0x95, 0x98, 0xa0, 0x00, 0x18,
            0x71, 0x94, 0x85, 0x96, 0x8a, 0xc8, 0x71, 0x94, 0x85, 0x97,
            0xa9, 0x20, 0xa2, 0x07, 0x95, 0x88, 0xca, 0xd0, 0xfb, 0x88,
            0xb1, 0x96, 0xc9, 0x61, 0x90, 0x07, 0xc9, 0x7b, 0xb0, 0x03
        };

        private static void TreeSearch()
        {
            Stack.Pop();
            Stack.Pop();
            var tokenBuf = Stack.Pop();
            var resultPtr = Stack.Pop();
            var nodePtr = Stack.Pop(); /* initialize with root node address */

            Stack.Push(Search.CspTreeSearch(tokenBuf, resultPtr, nodePtr));
        }

        private static Random random = new();

        private static void Randomize() => Native.random = new();

        private static readonly byte[] randomizeSig1 =
        {
            0xad, 0x13, 0xbf, 0x8d, 0x3f, 0x02, 0x8d, 0x40,
            0x02, 0xad, 0x14, 0xbf, 0x8d, 0x41, 0x02, 0x8d,
            0x42, 0x02, 0x0d, 0x3f, 0x02, 0xd0, 0x05, 0xa9,
            0x55, 0x8d, 0x42, 0x02, 0x60, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x1e, 0x00, 0x1d, 0x00, 0x19, 0x00,
            0x18, 0x00, 0x17, 0x00, 0x12, 0x00, 0x06, 0x00,
            0x00, 0x00, 0x32, 0x00
        };

        private static readonly byte[] randomizeSig2 =
        {
            0xad, 0x13, 0xbf, 0x8d, 0x25, 0x02, 0x8d, 0x26,
            0x02, 0xad, 0x14, 0xbf, 0x8d, 0x27, 0x02, 0x8d,
            0x28, 0x02, 0x0d, 0x25, 0x02, 0xd0, 0x05, 0xa9,
            0x55, 0x8d, 0x28, 0x02, 0x60, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x1e, 0x00, 0x1d, 0x00, 0x19, 0x00,
            0x18, 0x00, 0x17, 0x00, 0x12, 0x00, 0x06, 0x00,
            0x00, 0x00, 0x32, 0x00
        };

        private static void KeyPress()
        {
            Stack.Pop();
            Stack.Pop();
            Stack.Push(Console.KeyAvailable ? 1 : 0);
        }

        private static readonly byte[] keypressSig =
        {
            0x68, 0x85, 0x00, 0x68, 0x85, 0x01, 0x68, 0x68,
            0x68, 0x68, 0xa9, 0x00, 0x48, 0xad, 0x21, 0xbf,
            0xd0, 0x06, 0x20, 0x5c, 0xff, 0x4c, 0x1b, 0x00,
            0x20, 0x0a, 0xbf, 0xad, 0x18, 0xbf, 0xcd, 0x19,
            0xbf, 0xf0, 0x04, 0xa9, 0x01, 0xd0, 0x02, 0xa9,
            0x00, 0x48, 0xa5, 0x01, 0x48, 0xa5, 0x00, 0x48,
            0x60, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x01, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x3c, 0x00
        };

        private static void Random()
        {
            Stack.Pop();
            Stack.Pop();
            Stack.Push((ushort)Native.random.Next(0x8000));
        }

        private static readonly byte[] randomSig =
        {
            0x68, 0x85, 0x00, 0x68, 0x85, 0x01, 0x68, 0x68,
            0x68, 0x68, 0xa0, 0x07, 0x0e, 0x39, 0x00, 0x08,
            0x2e, 0x3a, 0x00, 0x2e, 0x3b, 0x00, 0x2e, 0x3c,
            0x00, 0x30, 0x05, 0x28, 0x10, 0x08, 0x30, 0x03,
            0x28, 0x30, 0x03, 0xee, 0x39, 0x00, 0x88, 0xd0,
            0xe3, 0xad, 0x39, 0x00, 0x4a, 0x48, 0xad, 0x3b,
            0x00, 0x48, 0xa5, 0x01, 0x48, 0xa5, 0x00, 0x48,
            0x60, 0x5a, 0xb2, 0xf6, 0x93, 0x00, 0x00, 0x00,
            0x33, 0x00, 0x31, 0x00, 0x30, 0x00, 0x2f, 0x00,
            0x24, 0x00, 0x20, 0x00, 0x1d, 0x00, 0x07, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x54, 0x00
        };

        private static readonly byte[] treeSearchSig =
        {
            0x68, 0x85, 0x84, 0x68, 0x85, 0x85, 0x68, 0x68, 0x68, 0x68,
            0x68, 0x85, 0x82, 0x68, 0x85, 0x83, 0x68, 0x85, 0x7e, 0x68,
            0x85, 0x7f, 0x68, 0x85, 0x80, 0x68, 0x85, 0x81, 0xa2, 0x08,
            0xa0, 0xff, 0xca, 0x30, 0x37, 0xc8, 0xb1, 0x82, 0xd1, 0x80,
            0xf0, 0xf6, 0x30, 0x17, 0xa0, 0x08, 0xb1, 0x80, 0xaa, 0xc8,
            0xb1, 0x80, 0xc9, 0x00, 0xd0, 0x04, 0xe0, 0x00, 0xf0, 0x2c,
            0x86, 0x80, 0x85, 0x81, 0x4c, 0x1c
        };

#if TURTLEGRAPHICS
        private static readonly byte TurtleSig[16] = Encoding.ASCII.GetBytes("TURTLEGRAPHICS::");
#endif

        private static readonly byte[] longIntSig =
        {
            0x68, 0x85, 0x76, 0x68, 0x85, 0x77, 0x68, 0xaa,
            0x68, 0xbd, 0x16, 0x00, 0x85, 0x78, 0xbd, 0x17,
            0x00, 0x85, 0x79, 0x6c, 0x78, 0x00, 0xa2, 0x00,
            0x4d, 0x02, 0x7a, 0x02, 0xd1, 0x00, 0xad, 0x02,
            0xc3, 0x03, 0x03, 0x06, 0x1f, 0x05, 0xe0, 0x00,
            0x03, 0x05, 0x7c, 0x05, 0xe6, 0x76, 0xd0, 0x02,
            0xe6, 0x77, 0x6c, 0x76, 0x00, 0xa9, 0x05, 0x6c,
            0x00, 0x00, 0xa9, 0x0d, 0x6c, 0x00, 0x00, 0xa9,
            0x06, 0x6c, 0x00, 0x00, 0x68, 0x85, 0x7a, 0x68,
            0x85, 0x7b, 0x68, 0x85, 0x81, 0xc6, 0x81, 0x06,
            0x81, 0x68, 0x68, 0x85, 0x83, 0x68, 0xba, 0xe8,
            0xbd, 0x00, 0x01, 0xd0, 0x05, 0xe8, 0xc6, 0x81,
            0xd0, 0xf6, 0x86, 0x7d, 0x8a, 0x18, 0x65, 0x81,
            0xaa, 0xca, 0x86, 0x7f, 0xe8, 0xbd, 0x00, 0x01,
            0x85, 0x80, 0xc6, 0x80, 0x06, 0x80, 0xe8, 0xe8,
            0xbd, 0x00, 0x01, 0x85, 0x82, 0xe8, 0xe8, 0xbd,
            0x00, 0x01, 0xd0, 0x05, 0xe8, 0xc6, 0x80, 0xd0,
            0xf6, 0x86, 0x7c, 0xca, 0x8a, 0x18, 0x65, 0x80,
            0x85, 0x7e, 0xa5, 0x80, 0x38, 0xe5, 0x81, 0x85,
            0x84, 0xe6, 0x7a, 0xd0, 0x02, 0xe6, 0x7b, 0x6c,
            0x7a, 0x00, 0x68, 0x85, 0x86, 0x68, 0x68, 0x85,
            0x80, 0x68, 0x68, 0x85, 0x82, 0x68, 0xa5, 0x80,
            0x38, 0xe5, 0x86, 0x90, 0x0a, 0x0a, 0xaa, 0xca,
            0x30, 0x0d, 0x68, 0xd0, 0x11, 0xf0, 0xf8, 0x0a,
            0xaa, 0xa9, 0x00, 0x48, 0xe8, 0xd0, 0xfc, 0x48,
            0xa5, 0x82, 0x48, 0x4c, 0x2c, 0x00, 0x4c, 0x35,
            0x00, 0xba, 0xe8, 0xe8, 0xe8, 0xbd, 0x00, 0x01,
            0x49, 0xff, 0x9d, 0x00, 0x01, 0x4c, 0x2c, 0x00,
            0x68, 0x0a, 0x0a, 0xaa, 0x68, 0xa0, 0x03, 0xbd,
            0x27, 0x01, 0x99, 0x28, 0x01, 0xca, 0x88, 0x10,
            0xf6, 0x20, 0x44, 0x00, 0xa5, 0x80, 0x05, 0x81,
            0xf0, 0x2e, 0xa5, 0x83, 0xc5, 0x82, 0xd0, 0x28,
            0xc9, 0xff, 0xf0, 0x0c, 0xa5, 0x80, 0xc5, 0x81,
            0xd0, 0x1e, 0xa6, 0x7c, 0xa4, 0x7d, 0xd0, 0x0a,
            0xa5, 0x81, 0xc5, 0x80, 0xd0, 0x12, 0xa6, 0x7d,
            0xa4, 0x7c, 0xbd, 0x00, 0x01, 0xd9, 0x00, 0x01,
            0xd0, 0x06, 0xe8, 0xc8, 0xc6, 0x80, 0xd0, 0xf2,
            0xea, 0xea, 0xea, 0xea, 0x4c, 0x3b, 0x01, 0xa6,
            0x7e, 0x9a, 0xa9, 0x00, 0x48, 0xa9, 0x01, 0x48,
            0x4c, 0x2c, 0x00, 0xa6, 0x7e, 0x9a, 0xa9, 0x00,
            0x48, 0x48, 0xf0, 0xf4, 0x90, 0x05, 0xea, 0xea,
            0x90, 0x05, 0xf0, 0x03, 0xb0, 0x05, 0xea, 0xea,
            0xf0, 0x02, 0xb0, 0x03, 0xd0, 0x05, 0xea, 0xea,
            0xf0, 0x05, 0xea, 0xea, 0xa6, 0x7e, 0x9a, 0xa9,
            0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0xa9, 0x02,
            0x48, 0x4c, 0x2c, 0x00, 0xa5, 0x81, 0x85, 0x85,
            0xa4, 0x7f, 0xa6, 0x7e, 0xb9, 0x00, 0x01, 0x9d,
            0x00, 0x01, 0xca, 0x88, 0xc6, 0x85, 0xd0, 0xf4,
            0x9a, 0x46, 0x81, 0x90, 0x05, 0xa9, 0x00, 0x48,
            0xe6, 0x81, 0x48, 0xa5, 0x83, 0x48, 0x48, 0xe6,
            0x81, 0xa5, 0x81, 0x48, 0x4c, 0x2c, 0x00, 0xa4,
            0x80, 0xa6, 0x84, 0x30, 0x06, 0xa4, 0x81, 0xa5,
            0x80, 0x85, 0x81, 0x84, 0x85, 0xa4, 0x7f, 0xa6,
            0x7e, 0x18, 0xf8, 0xb9, 0x00, 0x01, 0x7d, 0x00,
            0x01, 0x9d, 0x00, 0x01, 0xca, 0x88, 0xc6, 0x85,
            0xd0, 0xf1, 0xa5, 0x84, 0xf0, 0x18, 0x30, 0x08,
            0x49, 0xff, 0x85, 0x84, 0xe6, 0x84, 0x8a, 0xa8,
            0xb9, 0x00, 0x01, 0x69, 0x00, 0x9d, 0x00, 0x01,
            0xca, 0x88, 0xe6, 0x84, 0xd0, 0xf2, 0xd8, 0x9a,
            0x90, 0x05, 0xa9, 0x01, 0x48, 0xe6, 0x81, 0xa5,
            0x82, 0x85, 0x83, 0x4c, 0x81, 0x01, 0xa5, 0x80,
            0xc5, 0x81, 0xd0, 0x17, 0x85, 0x85, 0xa6, 0x7c,
            0xa4, 0x7d, 0xbd, 0x00, 0x01, 0xd9, 0x00, 0x01,
            0xd0, 0x09, 0xe8, 0xc8, 0xc6, 0x85, 0xd0, 0xf2,
            0x4c, 0x5c, 0x01, 0xb0, 0x0a, 0xa6, 0x7e, 0xa4,
            0x7f, 0xa5, 0x80, 0x85, 0x85, 0xd0, 0x08, 0xa6,
            0x7f, 0xa4, 0x7e, 0xa5, 0x81, 0x85, 0x85, 0x38,
            0xf8, 0xb9, 0x00, 0x01, 0xfd, 0x00, 0x01, 0x99,
            0x00, 0x01, 0xca, 0x88, 0xc6, 0x85, 0xd0, 0xf1,
            0xb0, 0x0b, 0xb9, 0x00, 0x01, 0xe9, 0x00, 0x99,
            0x00, 0x01, 0x88, 0x90, 0xf5, 0xd8, 0xc4, 0x7f,
            0xb0, 0x0d, 0xa5, 0x86, 0xf0, 0x06, 0xa5, 0x83,
            0x49, 0xff, 0x85, 0x83, 0x4c, 0x6c, 0x01, 0xa6,
            0x7f, 0x9a, 0x4c, 0x2c, 0x00, 0x20, 0x44, 0x00,
            0xa5, 0x80, 0x05, 0x81, 0xd0, 0x03, 0x4c, 0x5c,
            0x01, 0xa5, 0x80, 0xd0, 0x03, 0x4c, 0x6c, 0x01,
            0xa5, 0x81, 0xd0, 0x06, 0xa6, 0x7f, 0x9a, 0x4c,
            0x2c, 0x00, 0xa5, 0x82, 0x45, 0x83, 0x30, 0x03,
            0x4c, 0x97, 0x01, 0xa9, 0x00, 0x85, 0x86, 0x4c,
            0xe6, 0x01, 0x20, 0x44, 0x00, 0xa5, 0x80, 0x05,
            0x81, 0xd0, 0x03, 0x4c, 0x5c, 0x01, 0xa5, 0x80,
            0xd0, 0x09, 0xa5, 0x83, 0x49, 0xff, 0x85, 0x83,
            0x4c, 0x6c, 0x01, 0xa5, 0x81, 0xd0, 0x06, 0xa6,
            0x7f, 0x9a, 0x4c, 0x2c, 0x00, 0xa5, 0x82, 0x45,
            0x83, 0x10, 0x03, 0x4c, 0x97, 0x01, 0xa9, 0x01,
            0x85, 0x86, 0x4c, 0xe6, 0x01, 0x20, 0x44, 0x00,
            0xa5, 0x80, 0xf0, 0x04, 0xa5, 0x81, 0xd0, 0x03,
            0x4c, 0x5c, 0x01, 0xa5, 0x82, 0x45, 0x83, 0x85,
            0x83, 0xba, 0x86, 0x86, 0xa5, 0x80, 0x85, 0x89,
            0xe6, 0x89, 0x18, 0x65, 0x81, 0x85, 0x88, 0x8a,
            0x38, 0xe5, 0x88, 0x85, 0x87, 0xe5, 0x88, 0xaa,
            0x9a, 0xa4, 0x88, 0xa6, 0x86, 0xa9, 0x00, 0x9d,
            0x00, 0x01, 0xca, 0x88, 0xd0, 0xf9, 0xa5, 0x86,
            0x85, 0x8d, 0xa5, 0x88, 0x85, 0x8e, 0xa5, 0x81,
            0x85, 0x8a, 0xa5, 0x7f, 0x85, 0x8b, 0xf8, 0xa9,
            0x00, 0x85, 0x8c, 0xa4, 0x88, 0xa6, 0x87, 0x9d,
            0x00, 0x01, 0xca, 0x88, 0xd0, 0xf9, 0xa6, 0x8b,
            0xbd, 0x00, 0x01, 0xa2, 0x06, 0xdd, 0x77, 0x03,
            0x90, 0x03, 0xfd, 0x77, 0x03, 0x26, 0x8c, 0xca,
            0x10, 0xf3, 0xa6, 0x7e, 0xa4, 0x87, 0xa5, 0x80,
            0x85, 0x85, 0xbd, 0x00, 0x01, 0x99, 0x00, 0x01,
            0xca, 0x88, 0xc6, 0x85, 0xd0, 0xf4, 0x46, 0x8c,
            0x90, 0x18, 0xa6, 0x87, 0xa4, 0x8d, 0xa5, 0x8e,
            0x85, 0x85, 0x18, 0xbd, 0x00, 0x01, 0x79, 0x00,
            0x01, 0x99, 0x00, 0x01, 0xca, 0x88, 0xc6, 0x85,
            0xd0, 0xf1, 0xa5, 0x8c, 0xf0, 0x13, 0xa6, 0x87,
            0xa4, 0x89, 0xbd, 0x00, 0x01, 0x7d, 0x00, 0x01,
            0x9d, 0x00, 0x01, 0xca, 0x88, 0xd0, 0xf3, 0xf0,
            0xcd, 0xc6, 0x8d, 0xc6, 0x8e, 0xc6, 0x8b, 0xc6,
            0x8a, 0xd0, 0x8c, 0xd8, 0xa5, 0x86, 0x85, 0x7f,
            0xa5, 0x88, 0x85, 0x81, 0x4c, 0x6c, 0x01, 0x01,
            0x02, 0x04, 0x08, 0x16, 0x32, 0x64, 0xa9, 0x00,
            0x85, 0x89, 0xa5, 0x7c, 0x18, 0x65, 0x88, 0xaa,
            0xca, 0xe4, 0x7e, 0xf0, 0x02, 0xb0, 0x32, 0x86,
            0x86, 0xf8, 0x38, 0xa6, 0x86, 0xa4, 0x87, 0xa5,
            0x88, 0x85, 0x85, 0x90, 0x13, 0xbd, 0x00, 0x01,
            0xf9, 0x00, 0x01, 0x9d, 0x00, 0x01, 0xca, 0x88,
            0xc6, 0x85, 0xd0, 0xf1, 0xe6, 0x89, 0xd0, 0xe3,
            0xbd, 0x00, 0x01, 0x79, 0x00, 0x01, 0x9d, 0x00,
            0x01, 0xca, 0x88, 0xc6, 0x85, 0xd0, 0xf1, 0xc6,
            0x89, 0xd8, 0x60, 0x20, 0x44, 0x00, 0xa5, 0x81,
            0xd0, 0x03, 0x4c, 0x3f, 0x00, 0xa5, 0x80, 0xc5,
            0x81, 0xd0, 0x16, 0xa6, 0x7c, 0xa4, 0x7d, 0xa5,
            0x80, 0x85, 0x85, 0xbd, 0x00, 0x01, 0xd9, 0x00,
            0x01, 0xd0, 0x06, 0xe8, 0xc8, 0xc6, 0x85, 0xd0,
            0xf2, 0xb0, 0x03, 0x4c, 0x5c, 0x01, 0xa5, 0x82,
            0x45, 0x83, 0x85, 0x83, 0xa9, 0x00, 0xc6, 0x7c,
            0xa4, 0x7c, 0x99, 0x00, 0x01, 0xe6, 0x80, 0xa6,
            0x7d, 0xca, 0x9a, 0x48, 0xe6, 0x81, 0xba, 0x86,
            0x8b, 0x8a, 0x38, 0xe5, 0x80, 0x85, 0x8c, 0x85,
            0x8a, 0xe5, 0x81, 0xaa, 0x9a, 0xa5, 0x81, 0x85,
            0x8f, 0x85, 0x91, 0x85, 0x90, 0xa6, 0x7f, 0xa4,
            0x8c, 0x86, 0x8d, 0x84, 0x8e, 0xa5, 0x81, 0x85,
            0x85, 0xbd, 0x00, 0x01, 0x99, 0x00, 0x01, 0xca,
            0x88, 0xc6, 0x85, 0xd0, 0xf4, 0xa2, 0x01, 0x86,
            0x92, 0xa6, 0x7d, 0xbd, 0x00, 0x01, 0x29, 0xf0,
            0xf0, 0x13, 0xa9, 0x00, 0x85, 0x92, 0x48, 0xe6,
            0x8f, 0xa5, 0x8f, 0x85, 0x90, 0xa5, 0x8c, 0x85,
            0x8d, 0xa5, 0x7f, 0x85, 0x8e, 0xa9, 0x04, 0x85,
            0x85, 0x18, 0xa6, 0x8c, 0xa4, 0x8f, 0x3e, 0x00,
            0x01, 0xca, 0x88, 0xd0, 0xf9, 0xc6, 0x85, 0xd0,
            0xf0, 0xa9, 0x00, 0x85, 0x93, 0xa5, 0x8e, 0x85,
            0x87, 0xa5, 0x91, 0x85, 0x88, 0x20, 0x7e, 0x03,
            0xa6, 0x86, 0xe4, 0x7e, 0xd0, 0x02, 0xe6, 0x93,
            0xa5, 0x89, 0x85, 0x84, 0xa5, 0x8d, 0x85, 0x87,
            0xa5, 0x90, 0x85, 0x88, 0x20, 0x7e, 0x03, 0xa5,
            0x84, 0x0a, 0x0a, 0x0a, 0x0a, 0x05, 0x89, 0xe6,
            0x8a, 0xa6, 0x8a, 0x9d, 0x00, 0x01, 0xe6, 0x7c,
            0xa5, 0x93, 0xf0, 0xc9, 0xa5, 0x8a, 0x85, 0x7f,
            0x38, 0xe5, 0x8c, 0x85, 0x81, 0xa5, 0x92, 0xd0,
            0x14, 0xa9, 0x04, 0x85, 0x85, 0x18, 0xa6, 0x8c,
            0xa4, 0x81, 0xe8, 0x7e, 0x00, 0x01, 0x88, 0xd0,
            0xf9, 0xc6, 0x85, 0xd0, 0xf0, 0x4c, 0x6c, 0x01,
            0xa9, 0x00, 0x85, 0x82, 0x85, 0x88, 0x85, 0x89,
            0x85, 0x8a, 0x85, 0x8b, 0xa5, 0x87, 0x10, 0x14,
            0x49, 0xff, 0x85, 0x87, 0xa5, 0x86, 0x49, 0xff,
            0x85, 0x86, 0xe6, 0x86, 0xd0, 0x02, 0xe6, 0x87,
            0xa9, 0xff, 0x85, 0x82, 0xa0, 0x10, 0xf8, 0x26,
            0x86, 0x26, 0x87, 0xa2, 0x03, 0xb5, 0x88, 0x75,
            0x88, 0x95, 0x88, 0xca, 0x10, 0xf7, 0x88, 0xd0,
            0xee, 0xd8, 0x60, 0x68, 0x85, 0x86, 0x68, 0x85,
            0x87, 0x20, 0xc8, 0x04, 0xa2, 0x03, 0xb5, 0x88,
            0x48, 0xca, 0x10, 0xfa, 0x48, 0xa5, 0x82, 0x48,
            0x48, 0xa9, 0x03, 0x48, 0x4c, 0x2c, 0x00, 0xba,
            0xe8, 0x86, 0x7d, 0xbc, 0x00, 0x01, 0x88, 0x98,
            0x0a, 0x85, 0x81, 0x8a, 0x18, 0x65, 0x81, 0x69,
            0x05, 0x85, 0x7c, 0xaa, 0xbd, 0x00, 0x01, 0x85,
            0x87, 0xca, 0xbd, 0x00, 0x01, 0x85, 0x86, 0x20,
            0xc8, 0x04, 0xba, 0x8a, 0x38, 0xe9, 0x06, 0xaa,
            0x9a, 0xe8, 0xa5, 0x81, 0x18, 0x69, 0x04, 0x85,
            0x85, 0xa4, 0x7d, 0xb9, 0x00, 0x01, 0x9d, 0x00,
            0x01, 0xe8, 0xc8, 0xc6, 0x85, 0xd0, 0xf4, 0xa4,
            0x7c, 0xa2, 0x03, 0xb5, 0x88, 0x99, 0x00, 0x01,
            0x88, 0xca, 0x10, 0xf7, 0x88, 0xa5, 0x82, 0x99,
            0x00, 0x01, 0x88, 0x88, 0xa9, 0x03, 0x99, 0x00,
            0x01, 0x4c, 0x2c, 0x00, 0x68, 0x85, 0x80, 0xc6,
            0x80, 0x68, 0x68, 0x85, 0x82, 0x68, 0xa5, 0x80,
            0x38, 0xe9, 0x03, 0x90, 0x0e, 0xaa, 0x68, 0xd0,
            0x6f, 0x68, 0xd0, 0x6c, 0xca, 0x10, 0xf7, 0xa9,
            0x02, 0x85, 0x80, 0xa9, 0x00, 0x85, 0x88, 0xa5,
            0x80, 0xc9, 0x01, 0xf0, 0x06, 0x68, 0xd0, 0x58,
            0x68, 0x85, 0x88, 0x68, 0x85, 0x89, 0x68, 0x85,
            0x8a, 0xa9, 0x0f, 0x85, 0x85, 0x46, 0x88, 0x66,
            0x89, 0x66, 0x8a, 0x66, 0x87, 0x66, 0x86, 0xa2,
            0x02, 0xb5, 0x88, 0x10, 0x03, 0x38, 0xe9, 0x30,
            0xa8, 0x29, 0x08, 0xf0, 0x03, 0x88, 0x88, 0x88,
            0x94, 0x88, 0xca, 0x10, 0xec, 0xc6, 0x85, 0xd0,
            0xdc, 0xa5, 0x8a, 0xd0, 0x23, 0x46, 0x87, 0x66,
            0x86, 0xa5, 0x82, 0x10, 0x12, 0xa5, 0x87, 0x49,
            0xff, 0x85, 0x87, 0xa5, 0x86, 0x49, 0xff, 0x85,
            0x86, 0xe6, 0x86, 0xd0, 0x02, 0xe6, 0x87, 0xa5,
            0x87, 0x48, 0xa5, 0x86, 0x48, 0x4c, 0x2c, 0x00,
            0x4c, 0x35, 0x00, 0x68, 0x85, 0x86, 0x68, 0x68,
            0x85, 0x88, 0x68, 0x85, 0x89, 0x68, 0x85, 0x80,
            0xc6, 0x80, 0x06, 0x80, 0x68, 0xa0, 0x00, 0x68,
            0x10, 0x05, 0xa9, 0x2d, 0xc8, 0x91, 0x88, 0x68,
            0x68, 0xd0, 0x04, 0xc6, 0x80, 0xd0, 0xf9, 0xc9,
            0x10, 0xb0, 0x0c, 0x09, 0x30, 0xc8, 0x91, 0x88,
            0xc6, 0x80, 0xf0, 0x19, 0x30, 0x17, 0x68, 0xaa,
            0x4a, 0x4a, 0x4a, 0x4a, 0x09, 0x30, 0xc8, 0x91,
            0x88, 0x8a, 0x29, 0x0f, 0x09, 0x30, 0xc8, 0x91,
            0x88, 0xc6, 0x80, 0xd0, 0xe9, 0xc4, 0x86, 0x90,
            0x05, 0xf0, 0x03, 0x4c, 0x3a, 0x00, 0x98, 0xa0,
            0x00, 0x91, 0x88, 0x4c, 0x2c, 0x00, 0x00, 0x00,
            0x56, 0x06, 0x53, 0x06, 0x4e, 0x06, 0x4e, 0x06,
            0x4e, 0x06, 0x4e, 0x06, 0x4e, 0x06, 0x4e, 0x06,
            0x4e, 0x06, 0x4e, 0x06, 0x4e, 0x06, 0x4e, 0x06,
            0x4e, 0x06, 0xae, 0x05, 0xad, 0x05, 0xa0, 0x05,
            0x98, 0x05, 0x97, 0x05, 0x92, 0x05, 0x59, 0x05,
            0x4f, 0x05, 0x20, 0x05, 0xf7, 0x04, 0xaa, 0x04,
            0x8f, 0x04, 0x4d, 0x04, 0x49, 0x04, 0x48, 0x04,
            0x41, 0x04, 0x3c, 0x04, 0x34, 0x04, 0x2d, 0x04,
            0x28, 0x04, 0x27, 0x04, 0x20, 0x04, 0x15, 0x04,
            0x0d, 0x04, 0x06, 0x04, 0x01, 0x04, 0x00, 0x04,
            0xf7, 0x03, 0xa4, 0x03, 0xa1, 0x03, 0x41, 0x03,
            0xf4, 0x02, 0xef, 0x02, 0xd0, 0x02, 0x48, 0x02,
            0x33, 0x02, 0xfc, 0x01, 0xba, 0x01, 0xa9, 0x01,
            0x88, 0x01, 0x50, 0x01, 0xce, 0x00, 0xcd, 0x00,
            0x7c, 0x00, 0x76, 0x00, 0x3a, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xda, 0x06
        };

        private static readonly byte[] longIntSig2 = Encoding.ASCII.GetBytes("decops:");
        private static readonly byte[] transcendental = Encoding.ASCII.GetBytes("transcen:");

        private static string GetFunctionName(ushort functionBase)
        {
            StringBuilder sb = new();
            for (var i = 0; ; i++)
            {
                var c = (char)Memory.ReadByte(functionBase, (short)(i + 9));
                if (!char.IsLetterOrDigit(c))
                    break;
                sb.Append(c);
            }
            return sb.ToString();
        }

        private static void Transcendental(ushort functionBase)
        {
            switch (Native.GetFunctionName(functionBase))
            {
                case "sin":
                    Stack.PopReal();
                    Stack.Push((float)Math.Sin(Stack.PopReal()));
                    return;
                case "cos":
                    Stack.PopReal();
                    Stack.Push((float)Math.Cos(Stack.PopReal()));
                    return;
                case "atan":
                    Stack.PopReal();
                    Stack.Push((float)Math.Atan(Stack.PopReal()));
                    return;
                case "sqrt":
                    Stack.PopReal();
                    Stack.Push((float)Math.Sqrt(Stack.PopReal()));
                    return;
                case "exp":
                    Stack.PopReal();
                    Stack.Push((float)Math.Exp(Stack.PopReal()));
                    return;
                case "ln":
                    Stack.PopReal();
                    Stack.Push((float)Math.Log(Stack.PopReal()));
                    return;
                case "log":
                    Stack.PopReal();
                    Stack.Push((float)Math.Log10(Stack.PopReal()));
                    return;
                default:
                    throw new ExecutionException(ExecutionErrorCode.UnimplementedInstruction);
            }
        }

        private static readonly byte[] appleStuff = Encoding.ASCII.GetBytes("applestu:");

        private static void AppleStuff(ushort functionBase)
        {
            switch (Native.GetFunctionName(functionBase))
            {
                case "paddle":
                    Stack.PopReal(); // bogus return
                    Stack.Pop(); // select
                    Stack.Push(0);
                    return;
                case "button":
                    Stack.PopReal(); // bogus return
                    Stack.Pop(); // select
                    Stack.Push(0);
                    return;
                case "ttlout":
                    Stack.Pop(); // select
                    Stack.Pop(); // data
                    return;
                case "keypress":
                    Stack.PopReal(); // bogus return
                    Stack.Push(0);
                    return;
                case "random":
                    Stack.PopReal(); // bogus return
                    Stack.Push((ushort)Native.random.Next(0x8000));
                    return;
                case "randomiz":
                    Native.random = new Random();
                    return;
                case "note":
                    if (OperatingSystem.IsWindows())
                        Console.Beep(Stack.Pop(), Stack.Pop());
                    else
                    {
                        Stack.Pop();
                        Stack.Pop();
                    }
                    return;
                default:
                    throw new ExecutionException(ExecutionErrorCode.UnimplementedInstruction);
            }
        }

        private static readonly Tuple<byte[], Action<ushort>>[] routines =
        {
            Tuple.Create(Native.idSearchSig, (Action<ushort>)(_ => Native.IdSearch())),
            Tuple.Create(Native.treeSearchSig, (Action<ushort>)(_ => Native.TreeSearch())),
#if TURTLEGRAPHICS
            Tuple.Create(turtleSig, (Action<ushort>)IdSearch),
#endif
            Tuple.Create(Native.randomizeSig1, (Action<ushort>)(_ => Native.Randomize())),
            Tuple.Create(Native.randomizeSig2, (Action<ushort>)(_ => Native.Randomize())),
            Tuple.Create(Native.randomSig, (Action<ushort>)(_ => Native.Random())),
            Tuple.Create(Native.keypressSig, (Action<ushort>)(_ => Native.KeyPress())),
            Tuple.Create(Native.longIntSig, (Action<ushort>) LongInteger.Process),
            Tuple.Create(Native.longIntSig2, (Action<ushort>) LongInteger.Process),
            Tuple.Create(Native.transcendental, (Action<ushort>) Native.Transcendental),
            Tuple.Create(Native.appleStuff, (Action<ushort>) Native.AppleStuff)
        };

        private static bool SignatureMatch(ushort entryPoint, IList<byte> signature)
        {
            for (short i = 0; i < signature.Count; i++)
                if (Memory.ReadByte(entryPoint, i) != signature[i])
                    return false;
            return true;
        }

        /// <summary>
        ///     The ProcessNative function is used to call a (simulation of) a
        ///     native assembler code function or procedure.
        /// </summary>
        /// <param name="jTab">
        ///     The address of the jump table (procedure attributes) of the
        ///     native code procedure or function to be called.
        /// </param>
        public static void Process(ushort jTab)
        {
            var entryPoint = VirtualMachine.GetProcedureInstructionPointerBase(jTab);
            var routine = Native.routines.FirstOrDefault(r => Native.SignatureMatch(entryPoint, r.Item1));
            if (routine == null)
                throw new ExecutionException(ExecutionErrorCode.UnimplementedInstruction);

            routine.Item2(entryPoint);
        }
    }
}
